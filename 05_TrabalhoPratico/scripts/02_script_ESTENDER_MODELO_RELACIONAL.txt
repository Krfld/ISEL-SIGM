--=============
-- Ligacao a BD
--=============
\set dataBase my_gis_ta
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================



----------------------------------------------------
----------------------------------------------------
-- Estender o Modelo Relacional com Novas Estruturas
----------------------------------------------------
----------------------------------------------------
DROP TYPE IF EXISTS t_velocidade;
DROP TYPE IF EXISTS t_aceleracao;
DROP OPERATOR IF EXISTS *( t_vector, real );
DROP OPERATOR IF EXISTS *( real, t_vector );
DROP OPERATOR IF EXISTS +( t_vector, t_vector );
DROP FUNCTION IF EXISTS produto_vector_por_escalar( t_vector, real );
DROP FUNCTION IF EXISTS produto_escalar_por_vector( real, t_vector );
DROP FUNCTION IF EXISTS produto_vector_por_escalar_sql( t_vector, real );
DROP FUNCTION IF EXISTS soma_vector_vector( t_vector, t_vector );
DROP FUNCTION IF EXISTS normalizar( t_vector );
DROP TYPE IF EXISTS t_vector;
----------------------------------------------------

CREATE TYPE t_vector AS (
	x real,
	y real
);



----------------------------------------------------

CREATE TYPE t_velocidade AS (
	linear t_vector,
	angular real
);


----------------------------------------------------

CREATE TYPE t_aceleracao AS (
	linear t_vector,
	angular real
);


---------------------------------------------------
---------------------------------------------------
-- Estender o Modelo Relacional com Novas Funcoes
---------------------------------------------------
--____________________________________
-- Produto de um vector por um escalar
--____________________________________
CREATE OR REPLACE FUNCTION produto_vector_por_escalar( vec t_vector, v real )
RETURNS t_vector
AS $$
DECLARE
    new_x real;
    new_y real;
BEGIN
    new_x := vec.x * v;
    new_y := vec.y * v;
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION produto_escalar_por_vector( v real, vec t_vector )
RETURNS t_vector
AS $$
DECLARE
    new_x real;
    new_y real;
BEGIN
    new_x := vec.x * v;
    new_y := vec.y * v;
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;

---------------------------------------------------
-- Definição do Operador
---------------------------------------------------
CREATE OPERATOR * (
leftarg = t_vector,
rightarg = real,
procedure = produto_vector_por_escalar,
commutator = *
);

CREATE OPERATOR * (
leftarg = real,
rightarg = t_vector,
procedure = produto_escalar_por_vector,
commutator = *
);



--______________________
-- Soma de dois vectores
--______________________
CREATE OR REPLACE FUNCTION soma_vector_vector( vec_a t_vector, vec_b t_vector )
RETURNS t_vector
AS $$
DECLARE
    new_x real;
    new_y real;
BEGIN
	new_x := vec_a.x + vec_b.x;
	new_y := vec_a.y + vec_b.y;
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;



---------------------------------------------------
-- Definição do Operador
---------------------------------------------------
CREATE OPERATOR + (
leftarg = t_vector,
rightarg = t_vector,
procedure = soma_vector_vector,
commutator = +
);


CREATE OR REPLACE FUNCTION norma( vec t_vector )
RETURNS real
AS $$
DECLARE
BEGIN
	RETURN sqrt(power(vec.x, 2) + power(vec.y, 2));
END;
$$ LANGUAGE plpgsql;



--__________________
-- Normalizar vector
--__________________
-- normalizar: dividir cada componente pela norma
-- norma: raiz duadrada da soma dos quadrados de cada componente (x**2 e' x ao quadrado)
CREATE OR REPLACE FUNCTION normalizar( vec t_vector )
RETURNS t_vector
AS $$
DECLARE
    new_x real;
    new_y real;
BEGIN
	new_x := vec.x / norma(vec);
	new_y := vec.y / norma(vec);
    RETURN (new_x, new_y);
END;
$$ LANGUAGE plpgsql;

