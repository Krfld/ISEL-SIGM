--=============
-- Ligacao a BD
--=============
\set dataBase my_gis_ta
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================


-----------------------------
-----------------------------
-- Simulacao de trajectorias:
-- [1] Iniciacao dos dados
-----------------------------
-----------------------------
DELETE FROM cinematica_hist;



/*
--------------------------------------------
--------------------------------------------
-- Simulacao de trajectorias:
-- [2] Executar as linhas (A) e (B) em ciclo
--------------------------------------------
--------------------------------------------
-- (A)
INSERT INTO cinematica_hist
SELECT nextval('cinematica_hist_id_hist_seq'), id, orientacao, velocidade , aceleracao, g_posicao
FROM cinematica;


-- (B)
UPDATE cinematica
SET velocidade = novo_velocidade( velocidade, aceleracao, 3 );

UPDATE cinematica
SET g_posicao = novo_posicao( g_posicao, velocidade, 3 );

UPDATE cinematica
SET orientacao = novo_orientacao( orientacao, velocidade, 3 );
--________________________________________________________________________________________________



-- ==========================
-- Separar os dois movimentos
-- ==========================
DROP VIEW IF EXISTS v_trajectoria_1;
CREATE VIEW v_trajectoria_1 AS
SELECT *
FROM cinematica_hist
WHERE id = 1;

DROP VIEW IF EXISTS v_trajectoria_2;
CREATE VIEW v_trajectoria_2 AS
SELECT *
FROM cinematica_hist
WHERE id = 2;


-- ========================================
-- Separar as duas estruturas de cinematica
-- ========================================
DROP VIEW IF EXISTS v_cinematica_1;
CREATE VIEW v_cinematica_1 AS
SELECT *
FROM cinematica
WHERE id = 1;

DROP VIEW IF EXISTS v_cinematica_2;
CREATE VIEW v_cinematica_2 AS
SELECT *
FROM cinematica
WHERE id = 2;
*/




INSERT INTO cinematica_hist
SELECT nextval('cinematica_hist_id_hist_seq'), id, orientacao, velocidade , aceleracao, g_posicao
FROM cinematica;


UPDATE cinematica
SET velocidade = 
CASE
    WHEN norma((novo_velocidade( c.velocidade, ((c.aceleracao).linear * e.efeito, (c.aceleracao).angular), 1 )).linear) > l.norma_max
	THEN c.velocidade
    ELSE novo_velocidade( c.velocidade, ((c.aceleracao).linear * e.efeito, (c.aceleracao).angular), 1 )
END
FROM cinematica c, objecto_movel o, efeito_obj e, terrenos_rios t, limites l, (
	SELECT c.id as id, max(t.nivel) as nivel
	FROM cinematica c, terrenos_rios t
	WHERE ST_Within(c.g_posicao, t.g_geo)
	GROUP BY c.id
) as n
WHERE
	n.id = c.id AND
	c.id = o.id_cinematica AND
	o.id = e.id_objeto AND
	ST_Within(c.g_posicao, t.g_geo) AND
	t.id_tipo_terreno = e.id_tipo_terreno AND
	n.nivel = t.nivel AND
	l.id_limite = 'vel' AND
	cinematica.id = c.id
;


UPDATE cinematica
SET g_posicao = novo_posicao( c.g_posicao, ((c.velocidade).linear * e.efeito, (c.velocidade).angular), 1 )
FROM cinematica c, objecto_movel o, efeito_obj e, terrenos_rios t, (
	SELECT c.id as id, max(t.nivel) as nivel
	FROM cinematica c, terrenos_rios t
	WHERE ST_Within(c.g_posicao, t.g_geo)
	GROUP BY c.id
) as n
WHERE
	n.id = c.id AND
	c.id = o.id_cinematica AND
	o.id = e.id_objeto AND
	ST_Within(c.g_posicao, t.g_geo) AND	
	t.id_tipo_terreno = e.id_tipo_terreno AND
	n.nivel = t.nivel AND
	cinematica.id = c.id
;


UPDATE cinematica
SET orientacao = novo_orientacao( orientacao, velocidade, 1 );


UPDATE objecto_movel
SET g_geo = ST_Translate(o.g_geo, ST_X(c.g_posicao) - ST_X(ST_Centroid(o.g_geo)), ST_Y(c.g_posicao) - ST_Y(ST_Centroid(o.g_geo)))
FROM objecto_movel o, cinematica c
WHERE o.id = c.id AND objecto_movel.id = o.id
;

