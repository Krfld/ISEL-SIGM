--=============
-- Ligação à BD
--=============
\set dataBase my_gis_ta
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================



INSERT INTO cinematica_hist
SELECT nextval('cinematica_hist_id_hist_seq'), id, orientacao, velocidade , aceleracao, g_posicao
FROM cinematica;


UPDATE cinematica
SET aceleracao = obter_aceleracao_perseguidor( pp.id_perseguidor, pp.id_alvo, 1 )
FROM pp
WHERE id = pp.id_perseguidor
;


UPDATE cinematica
SET velocidade =
	CASE
		WHEN norma((novo_velocidade( c.velocidade, c.aceleracao, 1 )).linear) > l.norma_max
		THEN (
			normalizar((novo_velocidade( c.velocidade, c.aceleracao, 1 )).linear) * l.norma_max,
			(novo_velocidade( c.velocidade, c.aceleracao, 1 )).angular
		)::t_velocidade
		ELSE novo_velocidade( c.velocidade, c.aceleracao, 1 )
	END
FROM cinematica c, limites l
WHERE l.id_limite = 'vel' AND cinematica.id = c.id
;


UPDATE cinematica
SET g_posicao = novo_posicao( c.g_posicao, ((c.velocidade).linear * e.efeito, (c.velocidade).angular), 1 )
FROM cinematica c, objecto_movel o, efeito_obj e, terrenos_rios t, (
	SELECT c.id as id, max(t.nivel) as nivel
	FROM cinematica c, terrenos_rios t
	WHERE ST_Within(c.g_posicao, t.g_geo)
	GROUP BY c.id
) as n
WHERE
	n.id = c.id AND
	c.id = o.id_cinematica AND
	o.id = e.id_objeto AND
	ST_Within(c.g_posicao, t.g_geo) AND	
	t.id_tipo_terreno = e.id_tipo_terreno AND
	n.nivel = t.nivel AND
	cinematica.id = c.id
;


UPDATE cinematica
SET orientacao = novo_orientacao( orientacao, velocidade, 1 );


UPDATE objecto_movel
SET g_geo = ST_Translate(o.g_geo, ST_X(c.g_posicao) - ST_X(ST_Centroid(o.g_geo)), ST_Y(c.g_posicao) - ST_Y(ST_Centroid(o.g_geo)))
FROM objecto_movel o, cinematica c
WHERE o.id = c.id AND objecto_movel.id = o.id
;






